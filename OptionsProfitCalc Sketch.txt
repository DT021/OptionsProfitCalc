OptionsProfitCalc Sketch



input SYMBOL, EXPECTEDPRICE, EXPECTEDDATE


getOptionsChain(SYMBOL, CALL/PUT)
		
		if (PUT)
			chain = getPuts
		else
			chain = getCalls

	for each in chain
	 	make optionsObject:
	 	array of optionsOjects optionschain


OptionObject:
	symbol: 'symbol'
	description: 'description'
	type: 'putCall'
	strikePrice: 'strikePrice'
	expirationDate: datetime from  description
	bid: 'bid'
	ask: 'ask'
	mark: 'mark'
	DTE: 'daysToExpiration'
	volatility: 'volatilty'
	delta: 'delta'
	gamma: 'gamma'
	theta: 'theta'
	vega: 'vega'
	rho: 'rho'
	openInterest: 'openInterest'
	volume: 'totalVolume'
	set;get; for each.
	expectedDTE: calculateDTE(ExpectedDate)
	expectedOptionPrice:getOptionsDF(analtyical, strike, from date, to date+1, volatilty=expectedVolitility, EXPECTEDPRICE, expectedDTE, interestRate=riskfree(expectedDTE/12))

	calculateDTE(DATE)
		expirydate = self.expirationDate
		return expiryDate-DATE.days

calculate interestrate

####adapted from wallstreet by Mike Dallas @mcdallas used under MIT License
import requests
from bs4 import BeautifulSoup

from scipy.interpolate import interp1d
from scipy import sqrt, log, exp
from scipy.stats import norm
from scipy.optimize import fsolve
TREASURY_URL = "http://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yield"

OVERNIGHT_RATE = 0
FALLBACK_RISK_FREE_RATE = 0.02


def riskfree():
    try:
        r = requests.get(TREASURY_URL)
        soup = BeautifulSoup(r.text, 'html.parser')

        table = soup.find("table", attrs={'class' : 't-chart'})
        rows = table.find_all('tr')
        lastrow = len(rows)-1
        cells = rows[lastrow].find_all("td")
        date = cells[0].get_text()
        m1 = float(cells[1].get_text())
        m2 = float(cells[2].get_text())
        m3 = float(cells[3].get_text())
        m6 = float(cells[4].get_text())
        y1 = float(cells[5].get_text())
        y2 = float(cells[6].get_text())
        y3 = float(cells[7].get_text())
        y5 = float(cells[8].get_text())
        y7 = float(cells[9].get_text())
        y10 = float(cells[10].get_text())
        y20 = float(cells[11].get_text())
        y30 = float(cells[12].get_text())

        years = (0, 1/12, 2/12, 3/12, 6/12, 1,2,3,5,7,10,20,30)
        rates = (OVERNIGHT_RATE, m1, m2, m3, m6, y1, y2, y3, y5, y7, y10, y20, y30)
        print(years,rates)
        return interp1d(years, rates)
    # If scraping treasury data fails use the constant fallback risk free rate
    except Exception:
        print('Exception')
        return lambda x: FALLBACK_RISK_FREE_RATE